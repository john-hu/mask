{"version":3,"sources":["index.js"],"names":["tf","require","CLASS_NAMES","FONT","MODEL_SIZE","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","prepareCanvas","id","document","getElementById","getContext","font","textBaseline","unboxingDetection","_ref2","Object","_Users_hchu_test_tfjs_yolov5_example_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_Users_hchu_test_tfjs_yolov5_example_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","_ref","_ref3","boxes","scores","classes","detections","_yield$Promise$all","_yield$Promise$all2","boxesData","scoresData","classesData","validCount","wrap","_context","prev","next","_Users_hchu_test_tfjs_yolov5_example_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","Promise","all","data","sent","abrupt","stop","_x","apply","this","arguments","drawDetections","_ref4","i","_boxesData$slice","slice","_boxesData$slice2","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","_boxesData$slice3","_boxesData$slice4","fillText","Detector","_useState","_useState2","modelLoadTime","setModelLoadTime","_useState3","_useState4","modelWarmupTime","setModelWarmupTime","_useState5","_useState6","perfValue","useState","detectTime","setDetectTime","_useDropHandler","_useState7","_useState8","preview","setPreview","onDrop","useCallback","accepted","rejected","links","console","log","length","useDropHandler","_useMaskDetection","_useState9","_useState10","model","setModel","useEffect","_callee2","startTime","input","warmupStart","_context2","setBackend","alert","Date","getTime","loadGraphModel","tidy","zeros","concat","executeAsync","detectImage","img","_callee3","_prepareCanvas","res","_yield$unboxingDetect","_context3","resizeBilinear","browser","fromPixels","div","expandDims","dispose","useMaskDetection","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","align","className","react_magic_dropzone__WEBPACK_IMPORTED_MODULE_5___default","accept","multiple","alt","onLoad","e","target","src","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.6ffa43d7.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MagicDropzone from \"react-magic-dropzone\";\n\nimport \"./styles.css\";\nconst tf = require(\"@tensorflow/tfjs\");\n\nconst WEIGHTS_PATH = \"./modeln/model.json\";\n\nconst CLASS_NAMES = [\"mask\", \"no mask\"];\nconst FONT = \"16px sans-serif\";\n\nconst MODEL_SIZE = [320, 320];\n\nconst cropToCanvas = (image, canvas, ctx) => {\n  const naturalWidth = image.naturalWidth;\n  const naturalHeight = image.naturalHeight;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.fillStyle = \"#000000\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  const ratio = Math.min(\n    canvas.width / image.naturalWidth,\n    canvas.height / image.naturalHeight\n  );\n  const newWidth = Math.round(naturalWidth * ratio);\n  const newHeight = Math.round(naturalHeight * ratio);\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    naturalWidth,\n    naturalHeight,\n    (canvas.width - newWidth) / 2,\n    (canvas.height - newHeight) / 2,\n    newWidth,\n    newHeight\n  );\n};\n\nconst prepareCanvas = id => {\n  const canvas = document.getElementById(id);\n  const ctx = canvas.getContext(\"2d\");\n  // Font options.\n  ctx.font = FONT;\n  ctx.textBaseline = \"top\";\n  return { canvas, ctx };\n};\n\nconst unboxingDetection = async ([boxes, scores, classes, detections]) => {\n  const [boxesData, scoresData, classesData, validCount] = await Promise.all([\n    boxes.data(),\n    scores.data(),\n    classes.data(),\n    detections.data(),\n  ]);\n  return {\n    boxesData,\n    scoresData,\n    classesData,\n    validCount: validCount[0],\n  };\n};\n\nconst drawDetections = ({\n  canvas,\n  ctx,\n  boxesData,\n  scoresData,\n  classesData,\n  validCount,\n}) => {\n  let i;\n  for (i = 0; i < validCount; ++i) {\n    let [x1, y1, x2, y2] = boxesData.slice(i * 4, (i + 1) * 4);\n    x1 *= canvas.width;\n    x2 *= canvas.width;\n    y1 *= canvas.height;\n    y2 *= canvas.height;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const klass = CLASS_NAMES[classesData[i]];\n    const score = scoresData[i].toFixed(2);\n\n    // Draw the bounding box.\n    ctx.strokeStyle = \"#00FFFF\";\n    ctx.lineWidth = 4;\n    ctx.strokeRect(x1, y1, width, height);\n\n    // Draw the label background.\n    ctx.fillStyle = \"#00FFFF\";\n    const textWidth = ctx.measureText(klass + \":\" + score).width;\n    const textHeight = parseInt(FONT, 10); // base 10\n    ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n  }\n  for (i = 0; i < validCount; ++i) {\n    let [x1, y1, ,] = boxesData.slice(i * 4, (i + 1) * 4);\n    x1 *= canvas.width;\n    y1 *= canvas.height;\n    const klass = CLASS_NAMES[classesData[i]];\n    const score = scoresData[i].toFixed(2);\n\n    // Draw the text last to ensure it's on top.\n    ctx.fillStyle = \"#000000\";\n    ctx.fillText(klass + \":\" + score, x1, y1);\n  }\n};\n\nconst usePerfValue = () => {\n  const [modelLoadTime, setModelLoadTime] = useState(0);\n  const [modelWarmupTime, setModelWarmupTime] = useState(0);\n  const [detectTime, setDetectTime] = useState(0);\n\n  return {\n    modelLoadTime,\n    modelWarmupTime,\n    detectTime,\n    setModelLoadTime,\n    setModelWarmupTime,\n    setDetectTime,\n  };\n};\n\nconst useDropHandler = () => {\n  const [preview, setPreview] = useState(\"\");\n  const onDrop = useCallback((accepted, rejected, links) => {\n    console.log(\"on drop\", accepted, rejected, links);\n    setPreview(\n      accepted.length + links.length > 0 ? accepted[0].preview || links[0] : \"\"\n    );\n  }, []);\n  return { preview, onDrop };\n};\n\nconst useMaskDetection = perfValue => {\n  const [model, setModel] = useState(null);\n  const { setModelLoadTime, setModelWarmupTime, setDetectTime } = perfValue;\n  useEffect(() => {\n    (async () => {\n      const webgl = await tf.setBackend(\"webgl\");\n      if (!webgl) {\n        alert(\"No WebGL found. The performance may not be good.\");\n      }\n      // load model\n      const startTime = new Date().getTime();\n      const model = await tf.loadGraphModel(WEIGHTS_PATH);\n      setModelLoadTime(new Date().getTime() - startTime);\n      console.log(\"load time\", new Date().getTime() - startTime);\n      // warm up\n      const input = tf.tidy(() => tf.zeros([1, ...MODEL_SIZE, 3]));\n      const warmupStart = new Date().getTime();\n      await model.executeAsync(input);\n      setModelWarmupTime(new Date().getTime() - warmupStart);\n      console.log(\"warmup time\", new Date().getTime() - warmupStart);\n      // let's rock'n'roll.\n      setModel(model);\n    })();\n  }, [setModelLoadTime, setModelWarmupTime]);\n\n  const detectImage = useCallback(\n    img => {\n      if (!model) {\n        return;\n      }\n      (async () => {\n        const { canvas, ctx } = prepareCanvas(\"canvas\");\n        cropToCanvas(img, canvas, ctx);\n        const input = tf.tidy(() => {\n          return tf.image\n            .resizeBilinear(tf.browser.fromPixels(canvas), MODEL_SIZE)\n            .div(255.0)\n            .expandDims(0);\n        });\n        const startTime = new Date().getTime();\n        const res = await model.executeAsync(input);\n        setDetectTime(new Date().getTime() - startTime);\n        console.log(\"execute time\", new Date().getTime() - startTime);\n        const {\n          boxesData,\n          scoresData,\n          classesData,\n          validCount,\n        } = await unboxingDetection(res);\n        tf.dispose(res);\n        drawDetections({\n          canvas,\n          ctx,\n          boxesData,\n          scoresData,\n          classesData,\n          validCount,\n        });\n      })();\n    },\n    [model, setDetectTime]\n  );\n\n  return { model, detectImage };\n};\n\nconst Detector = () => {\n  const perfValue = usePerfValue();\n  const { preview, onDrop } = useDropHandler();\n  const { model, detectImage } = useMaskDetection(perfValue);\n  return (\n    <div align=\"center\">\n      load: {perfValue.modelLoadTime} ms, warm up: {perfValue.modelWarmupTime}{\" \"}\n      ms, detect: {perfValue.detectTime} ms\n      <div className=\"Dropzone-page\">\n        {model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={onDrop}\n          >\n            {preview ? (\n              <img\n                alt=\"upload preview\"\n                onLoad={e => detectImage(e.target)}\n                className=\"Dropzone-img\"\n                src={preview}\n              />\n            ) : (\n              \"Choose or drop a file.\"\n            )}\n            <canvas id=\"canvas\" width=\"640\" height=\"640\" />\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Detector />, rootElement);\n"],"sourceRoot":""}